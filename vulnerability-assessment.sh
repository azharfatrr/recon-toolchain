#!/bin/bash
# Vulnerability scanning script using Nuclei with severity filtering and progress display
set -euo pipefail

########################################
# CONFIGURATION
########################################
TARGET="$1"                              # Required arg
FORCE="${2:-}"                           # Optional arg

PPATH=$(pwd)
RESULT_PATH="$PPATH/results/$TARGET"
RAW_PATH="$RESULT_PATH/raw/nuclei"
NUCLEI_OUTPUT_PATH="$RESULT_PATH/vulnerability"   # Final merged output directory
LOGFILE="$RAW_PATH/nuclei.log"

# Files to scan (file path + use_dast_flag)
SCAN_TARGETS=(
    "$RESULT_PATH/endpoints_active.txt:true"
    "$RESULT_PATH/subdomains_active.txt:false"
)

NUCLEI_TEMPLATES_PATH="$HOME/nuclei-templates"     # Path to templates
NUCLEI_SEVERITY="info,low,medium,high,critical"    # Severities to scan
NUCLEI_RATELIMIT=150                               # Requests per second
NUCLEI_RETRIES=2                                   # Retries per request
NUCLEI_EXTRA_ARGS=""                               # Extra args if needed

########################################
# VALIDATION
########################################
if [[ -z "${TARGET}" ]]; then
    echo "[ERROR] No target provided. Usage: $0 <target> [--force]"
    exit 1
fi

command -v nuclei >/dev/null || { echo "[ERROR] nuclei is not installed."; exit 1; }
command -v jq >/dev/null || { echo "[ERROR] jq is not installed."; exit 1; }

: "${NUCLEI_TEMPLATES_PATH:?Need to set NUCLEI_TEMPLATES_PATH}"
: "${NUCLEI_SEVERITY:?Need to set NUCLEI_SEVERITY}"
: "${NUCLEI_RATELIMIT:?Need to set NUCLEI_RATELIMIT}"

########################################
# CLEANUP IF FORCED
########################################
if [[ "$FORCE" == "--force" ]]; then
    echo "[INFO] Cleaning old Nuclei results..."
    rm -rf "$RAW_PATH" "$NUCLEI_OUTPUT_PATH"
fi

mkdir -p "$RAW_PATH" "$NUCLEI_OUTPUT_PATH"

########################################
# SCAN FUNCTION
########################################
scan_file() {
    local input_file="$1"
    local use_dast="$2"

    if [[ ! -s "$input_file" ]]; then
        echo "[WARN] Skipping — file not found or empty: $input_file"
        return
    fi

    IFS=',' read -ra severity_array <<< "$NUCLEI_SEVERITY"
    total_levels=${#severity_array[@]}
    current_level=1

    for crit in "${severity_array[@]}"; do
        echo "[$(date +'%Y-%m-%d %H:%M:%S')] ($current_level/$total_levels) Scanning: [$crit] from $(basename "$input_file")"

        JSON_OUT="$RAW_PATH/$(basename "$input_file")_${crit}_json.txt"
        TEMP_TXT_OUT="$RAW_PATH/$(basename "$input_file")_${crit}.txt"
        FINAL_TXT_OUT="$NUCLEI_OUTPUT_PATH/${crit}.txt"

        # Skip if already scanned for this input
        if [[ -f "$JSON_OUT" ]]; then
            echo "[INFO] Skipping $crit — results already exist for $(basename "$input_file")."
        else
            nuclei_cmd=(
                nuclei
                -l "$input_file"
                -severity "$crit"
                -nh -silent
                -stats
                -rl "$NUCLEI_RATELIMIT"
                -retries "$NUCLEI_RETRIES"
                ${NUCLEI_EXTRA_ARGS}
                -t "$NUCLEI_TEMPLATES_PATH"
                -j -o "$JSON_OUT"
            )

            [[ "$use_dast" == "true" ]] && nuclei_cmd+=(-dast)

            "${nuclei_cmd[@]}" >>"$LOGFILE" 2>&1
        fi

        if [[ -s "$JSON_OUT" ]]; then
            jq -r '
                "[" + .["template-id"] +
                (if .["matcher-name"] != null then ":" + .["matcher-name"] else "" end) + "]" +
                " [" + .["type"] + "]" +
                " [" + .info.severity + "]" +
                " [" + (.["matched-at"] // .host) + "]" +
                (if .["extracted-results"] != null then " [" + ((.["extracted-results"] | @json)) + "]" else "" end)
            ' "$JSON_OUT" > "$TEMP_TXT_OUT"
        fi


        # Merge into final severity file (deduplicated)
        if [[ -s "$TEMP_TXT_OUT" ]]; then
            cat "$TEMP_TXT_OUT" >> "$FINAL_TXT_OUT"
            sort -u "$FINAL_TXT_OUT" -o "$FINAL_TXT_OUT"
        fi

        # Merge the json results into a single file
        if [[ -s "$JSON_OUT" ]]; then
            cat "$JSON_OUT" >> "$NUCLEI_OUTPUT_PATH/merged_results_json.txt"
        fi

        ((current_level++))
    done
}

########################################
# MAIN EXECUTION
########################################
for target in "${SCAN_TARGETS[@]}"; do
    IFS=":" read -r file_path dast_flag <<< "$target"
    scan_file "$file_path" "$dast_flag"
done

echo "[DONE] Nuclei scan complete. Merged results stored in: $NUCLEI_OUTPUT_PATH"
